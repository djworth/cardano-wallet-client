// Package wallet provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package wallet

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Construct Address
	// (POST /addresses)
	PostAnyAddress(ctx echo.Context) error
	// Inspect Address
	// (GET /addresses/{addressId})
	InspectAddress(ctx echo.Context, addressId string) error
	// List
	// (GET /byron-wallets)
	ListByronWallets(ctx echo.Context) error
	// Restore
	// (POST /byron-wallets)
	PostByronWallet(ctx echo.Context) error
	// Delete
	// (DELETE /byron-wallets/{walletId})
	DeleteByronWallet(ctx echo.Context, walletId string) error
	// Get
	// (GET /byron-wallets/{walletId})
	GetByronWallet(ctx echo.Context, walletId string) error
	// Update Metadata
	// (PUT /byron-wallets/{walletId})
	PutByronWallet(ctx echo.Context, walletId string) error
	// List
	// (GET /byron-wallets/{walletId}/addresses)
	ListByronAddresses(ctx echo.Context, walletId string, params ListByronAddressesParams) error
	// Create Address
	// (POST /byron-wallets/{walletId}/addresses)
	CreateAddress(ctx echo.Context, walletId string) error
	// Import Addresses
	// (PUT /byron-wallets/{walletId}/addresses)
	ImportAddresses(ctx echo.Context, walletId string) error
	// Import Address
	// (PUT /byron-wallets/{walletId}/addresses/{addressId})
	ImportAddress(ctx echo.Context, walletId string, addressId string) error
	// List Assets
	// (GET /byron-wallets/{walletId}/assets)
	ListByronAssets(ctx echo.Context, walletId string) error
	// Get Asset (empty name)
	// (GET /byron-wallets/{walletId}/assets/{policyId})
	GetByronAssetDefault(ctx echo.Context, walletId string, policyId string) error
	// Get Asset
	// (GET /byron-wallets/{walletId}/assets/{policyId}/{assetName})
	GetByronAsset(ctx echo.Context, walletId string, policyId string, assetName string) error
	// Random
	// (POST /byron-wallets/{walletId}/coin-selections/random)
	ByronSelectCoins(ctx echo.Context, walletId string) error
	// Calculate Cost
	// (GET /byron-wallets/{walletId}/migrations)
	GetByronWalletMigrationInfo(ctx echo.Context, walletId string) error
	// Migrate
	// (POST /byron-wallets/{walletId}/migrations)
	MigrateByronWallet(ctx echo.Context, walletId string) error
	// Update Passphrase
	// (PUT /byron-wallets/{walletId}/passphrase)
	PutByronWalletPassphrase(ctx echo.Context, walletId string) error
	// Estimate Fee
	// (POST /byron-wallets/{walletId}/payment-fees)
	PostByronTransactionFee(ctx echo.Context, walletId string) error
	// UTxO Statistics
	// (GET /byron-wallets/{walletId}/statistics/utxos)
	GetByronUTxOsStatistics(ctx echo.Context, walletId string) error
	// List
	// (GET /byron-wallets/{walletId}/transactions)
	ListByronTransactions(ctx echo.Context, walletId string, params ListByronTransactionsParams) error
	// Create
	// (POST /byron-wallets/{walletId}/transactions)
	PostByronTransaction(ctx echo.Context, walletId string) error
	// Forget
	// (DELETE /byron-wallets/{walletId}/transactions/{transactionId})
	DeleteByronTransaction(ctx echo.Context, walletId string, transactionId string) error
	// Get
	// (GET /byron-wallets/{walletId}/transactions/{transactionId})
	GetByronTransaction(ctx echo.Context, walletId string, transactionId string) error
	// Clock
	// (GET /network/clock)
	GetNetworkClock(ctx echo.Context, params GetNetworkClockParams) error
	// Information
	// (GET /network/information)
	GetNetworkInformation(ctx echo.Context) error
	// Parameters
	// (GET /network/parameters)
	GetNetworkParameters(ctx echo.Context) error
	// Submit External Transaction
	// (POST /proxy/transactions)
	PostExternalTransaction(ctx echo.Context) error
	// Get settings
	// (GET /settings)
	GetSettings(ctx echo.Context) error
	// Update settings
	// (PUT /settings)
	PutSettings(ctx echo.Context) error
	// Create
	// (POST /shared-wallets)
	PostSharedWallet(ctx echo.Context) error
	// Delete
	// (DELETE /shared-wallets/{walletId})
	DeleteSharedWallet(ctx echo.Context, walletId string) error
	// Get
	// (GET /shared-wallets/{walletId})
	GetSharedWallet(ctx echo.Context, walletId string) error
	// Update Delegation
	// (PATCH /shared-wallets/{walletId}/delegation-script-template)
	PatchSharedWalletInDelegation(ctx echo.Context, walletId string) error
	// Update Payment
	// (PATCH /shared-wallets/{walletId}/payment-script-template)
	PatchSharedWalletInPayment(ctx echo.Context, walletId string) error
	// Current SMASH health
	// (GET /smash/health)
	GetCurrentSmashHealth(ctx echo.Context, params GetCurrentSmashHealthParams) error
	// List
	// (GET /stake-pools)
	ListStakePools(ctx echo.Context, params ListStakePoolsParams) error
	// Quit
	// (DELETE /stake-pools/*/wallets/{walletId})
	QuitStakePool(ctx echo.Context, walletId string) error
	// View maintenance actions
	// (GET /stake-pools/maintenance-actions)
	GetMaintenanceActions(ctx echo.Context) error
	// Trigger Maintenance actions
	// (POST /stake-pools/maintenance-actions)
	PostMaintenanceAction(ctx echo.Context) error
	// Join
	// (PUT /stake-pools/{stakePoolId}/wallets/{walletId})
	JoinStakePool(ctx echo.Context, stakePoolId string, walletId string) error
	// List
	// (GET /wallets)
	ListWallets(ctx echo.Context) error
	// Create / Restore
	// (POST /wallets)
	PostWallet(ctx echo.Context) error
	// Delete
	// (DELETE /wallets/{walletId})
	DeleteWallet(ctx echo.Context, walletId string) error
	// Get
	// (GET /wallets/{walletId})
	GetWallet(ctx echo.Context, walletId string) error
	// Update Metadata
	// (PUT /wallets/{walletId})
	PutWallet(ctx echo.Context, walletId string) error
	// List
	// (GET /wallets/{walletId}/addresses)
	ListAddresses(ctx echo.Context, walletId string, params ListAddressesParams) error
	// List Assets
	// (GET /wallets/{walletId}/assets)
	ListAssets(ctx echo.Context, walletId string) error
	// Get Asset (empty name)
	// (GET /wallets/{walletId}/assets/{policyId})
	GetAssetDefault(ctx echo.Context, walletId string, policyId string) error
	// Get Asset
	// (GET /wallets/{walletId}/assets/{policyId}/{assetName})
	GetAsset(ctx echo.Context, walletId string, policyId string, assetName string) error
	// Random
	// (POST /wallets/{walletId}/coin-selections/random)
	SelectCoins(ctx echo.Context, walletId string) error
	// Estimate Fee
	// (GET /wallets/{walletId}/delegation-fees)
	GetDelegationFee(ctx echo.Context, walletId string) error
	// Create
	// (POST /wallets/{walletId}/keys/{index})
	PostAccountKey(ctx echo.Context, walletId string, index string) error
	// Get Public Key
	// (GET /wallets/{walletId}/keys/{role}/{index})
	GetWalletKey(ctx echo.Context, walletId string, role string, index string) error
	// Calculate Cost
	// (GET /wallets/{walletId}/migrations)
	GetShelleyWalletMigrationInfo(ctx echo.Context, walletId string) error
	// Migrate
	// (POST /wallets/{walletId}/migrations)
	MigrateShelleyWallet(ctx echo.Context, walletId string) error
	// Update Passphrase
	// (PUT /wallets/{walletId}/passphrase)
	PutWalletPassphrase(ctx echo.Context, walletId string) error
	// Estimate Fee
	// (POST /wallets/{walletId}/payment-fees)
	PostTransactionFee(ctx echo.Context, walletId string) error
	// Sign Metadata
	// (POST /wallets/{walletId}/signatures/{role}/{index})
	SignMetadata(ctx echo.Context, walletId string, role string, index string) error
	// UTxO Statistics
	// (GET /wallets/{walletId}/statistics/utxos)
	GetUTxOsStatistics(ctx echo.Context, walletId string) error
	// List
	// (GET /wallets/{walletId}/transactions)
	ListTransactions(ctx echo.Context, walletId string, params ListTransactionsParams) error
	// Create
	// (POST /wallets/{walletId}/transactions)
	PostTransaction(ctx echo.Context, walletId string) error
	// Forget
	// (DELETE /wallets/{walletId}/transactions/{transactionId})
	DeleteTransaction(ctx echo.Context, walletId string, transactionId string) error
	// Get
	// (GET /wallets/{walletId}/transactions/{transactionId})
	GetTransaction(ctx echo.Context, walletId string, transactionId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostAnyAddress converts echo context to params.
func (w *ServerInterfaceWrapper) PostAnyAddress(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAnyAddress(ctx)
	return err
}

// InspectAddress converts echo context to params.
func (w *ServerInterfaceWrapper) InspectAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "addressId" -------------
	var addressId string

	err = runtime.BindStyledParameter("simple", false, "addressId", ctx.Param("addressId"), &addressId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter addressId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.InspectAddress(ctx, addressId)
	return err
}

// ListByronWallets converts echo context to params.
func (w *ServerInterfaceWrapper) ListByronWallets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListByronWallets(ctx)
	return err
}

// PostByronWallet converts echo context to params.
func (w *ServerInterfaceWrapper) PostByronWallet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostByronWallet(ctx)
	return err
}

// DeleteByronWallet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteByronWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteByronWallet(ctx, walletId)
	return err
}

// GetByronWallet converts echo context to params.
func (w *ServerInterfaceWrapper) GetByronWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetByronWallet(ctx, walletId)
	return err
}

// PutByronWallet converts echo context to params.
func (w *ServerInterfaceWrapper) PutByronWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutByronWallet(ctx, walletId)
	return err
}

// ListByronAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) ListByronAddresses(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListByronAddressesParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListByronAddresses(ctx, walletId, params)
	return err
}

// CreateAddress converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAddress(ctx, walletId)
	return err
}

// ImportAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) ImportAddresses(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImportAddresses(ctx, walletId)
	return err
}

// ImportAddress converts echo context to params.
func (w *ServerInterfaceWrapper) ImportAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "addressId" -------------
	var addressId string

	err = runtime.BindStyledParameter("simple", false, "addressId", ctx.Param("addressId"), &addressId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter addressId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ImportAddress(ctx, walletId, addressId)
	return err
}

// ListByronAssets converts echo context to params.
func (w *ServerInterfaceWrapper) ListByronAssets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListByronAssets(ctx, walletId)
	return err
}

// GetByronAssetDefault converts echo context to params.
func (w *ServerInterfaceWrapper) GetByronAssetDefault(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetByronAssetDefault(ctx, walletId, policyId)
	return err
}

// GetByronAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetByronAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// ------------- Path parameter "assetName" -------------
	var assetName string

	err = runtime.BindStyledParameter("simple", false, "assetName", ctx.Param("assetName"), &assetName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetByronAsset(ctx, walletId, policyId, assetName)
	return err
}

// ByronSelectCoins converts echo context to params.
func (w *ServerInterfaceWrapper) ByronSelectCoins(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ByronSelectCoins(ctx, walletId)
	return err
}

// GetByronWalletMigrationInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetByronWalletMigrationInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetByronWalletMigrationInfo(ctx, walletId)
	return err
}

// MigrateByronWallet converts echo context to params.
func (w *ServerInterfaceWrapper) MigrateByronWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MigrateByronWallet(ctx, walletId)
	return err
}

// PutByronWalletPassphrase converts echo context to params.
func (w *ServerInterfaceWrapper) PutByronWalletPassphrase(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutByronWalletPassphrase(ctx, walletId)
	return err
}

// PostByronTransactionFee converts echo context to params.
func (w *ServerInterfaceWrapper) PostByronTransactionFee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostByronTransactionFee(ctx, walletId)
	return err
}

// GetByronUTxOsStatistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetByronUTxOsStatistics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetByronUTxOsStatistics(ctx, walletId)
	return err
}

// ListByronTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) ListByronTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListByronTransactionsParams
	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListByronTransactions(ctx, walletId, params)
	return err
}

// PostByronTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) PostByronTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostByronTransaction(ctx, walletId)
	return err
}

// DeleteByronTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteByronTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", ctx.Param("transactionId"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteByronTransaction(ctx, walletId, transactionId)
	return err
}

// GetByronTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetByronTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", ctx.Param("transactionId"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetByronTransaction(ctx, walletId, transactionId)
	return err
}

// GetNetworkClock converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkClock(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetNetworkClockParams
	// ------------- Optional query parameter "forceNtpCheck" -------------

	err = runtime.BindQueryParameter("form", true, false, "forceNtpCheck", ctx.QueryParams(), &params.ForceNtpCheck)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter forceNtpCheck: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkClock(ctx, params)
	return err
}

// GetNetworkInformation converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkInformation(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkInformation(ctx)
	return err
}

// GetNetworkParameters converts echo context to params.
func (w *ServerInterfaceWrapper) GetNetworkParameters(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetNetworkParameters(ctx)
	return err
}

// PostExternalTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) PostExternalTransaction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostExternalTransaction(ctx)
	return err
}

// GetSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetSettings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSettings(ctx)
	return err
}

// PutSettings converts echo context to params.
func (w *ServerInterfaceWrapper) PutSettings(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutSettings(ctx)
	return err
}

// PostSharedWallet converts echo context to params.
func (w *ServerInterfaceWrapper) PostSharedWallet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostSharedWallet(ctx)
	return err
}

// DeleteSharedWallet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSharedWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSharedWallet(ctx, walletId)
	return err
}

// GetSharedWallet converts echo context to params.
func (w *ServerInterfaceWrapper) GetSharedWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetSharedWallet(ctx, walletId)
	return err
}

// PatchSharedWalletInDelegation converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSharedWalletInDelegation(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchSharedWalletInDelegation(ctx, walletId)
	return err
}

// PatchSharedWalletInPayment converts echo context to params.
func (w *ServerInterfaceWrapper) PatchSharedWalletInPayment(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchSharedWalletInPayment(ctx, walletId)
	return err
}

// GetCurrentSmashHealth converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentSmashHealth(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCurrentSmashHealthParams
	// ------------- Optional query parameter "url" -------------

	err = runtime.BindQueryParameter("form", true, false, "url", ctx.QueryParams(), &params.Url)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter url: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetCurrentSmashHealth(ctx, params)
	return err
}

// ListStakePools converts echo context to params.
func (w *ServerInterfaceWrapper) ListStakePools(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ListStakePoolsParams
	// ------------- Required query parameter "stake" -------------

	err = runtime.BindQueryParameter("form", true, true, "stake", ctx.QueryParams(), &params.Stake)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stake: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListStakePools(ctx, params)
	return err
}

// QuitStakePool converts echo context to params.
func (w *ServerInterfaceWrapper) QuitStakePool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.QuitStakePool(ctx, walletId)
	return err
}

// GetMaintenanceActions converts echo context to params.
func (w *ServerInterfaceWrapper) GetMaintenanceActions(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMaintenanceActions(ctx)
	return err
}

// PostMaintenanceAction converts echo context to params.
func (w *ServerInterfaceWrapper) PostMaintenanceAction(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostMaintenanceAction(ctx)
	return err
}

// JoinStakePool converts echo context to params.
func (w *ServerInterfaceWrapper) JoinStakePool(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "stakePoolId" -------------
	var stakePoolId string

	err = runtime.BindStyledParameter("simple", false, "stakePoolId", ctx.Param("stakePoolId"), &stakePoolId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter stakePoolId: %s", err))
	}

	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.JoinStakePool(ctx, stakePoolId, walletId)
	return err
}

// ListWallets converts echo context to params.
func (w *ServerInterfaceWrapper) ListWallets(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListWallets(ctx)
	return err
}

// PostWallet converts echo context to params.
func (w *ServerInterfaceWrapper) PostWallet(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostWallet(ctx)
	return err
}

// DeleteWallet converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteWallet(ctx, walletId)
	return err
}

// GetWallet converts echo context to params.
func (w *ServerInterfaceWrapper) GetWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWallet(ctx, walletId)
	return err
}

// PutWallet converts echo context to params.
func (w *ServerInterfaceWrapper) PutWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutWallet(ctx, walletId)
	return err
}

// ListAddresses converts echo context to params.
func (w *ServerInterfaceWrapper) ListAddresses(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAddressesParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAddresses(ctx, walletId, params)
	return err
}

// ListAssets converts echo context to params.
func (w *ServerInterfaceWrapper) ListAssets(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAssets(ctx, walletId)
	return err
}

// GetAssetDefault converts echo context to params.
func (w *ServerInterfaceWrapper) GetAssetDefault(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAssetDefault(ctx, walletId, policyId)
	return err
}

// GetAsset converts echo context to params.
func (w *ServerInterfaceWrapper) GetAsset(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "policyId" -------------
	var policyId string

	err = runtime.BindStyledParameter("simple", false, "policyId", ctx.Param("policyId"), &policyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyId: %s", err))
	}

	// ------------- Path parameter "assetName" -------------
	var assetName string

	err = runtime.BindStyledParameter("simple", false, "assetName", ctx.Param("assetName"), &assetName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter assetName: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAsset(ctx, walletId, policyId, assetName)
	return err
}

// SelectCoins converts echo context to params.
func (w *ServerInterfaceWrapper) SelectCoins(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SelectCoins(ctx, walletId)
	return err
}

// GetDelegationFee converts echo context to params.
func (w *ServerInterfaceWrapper) GetDelegationFee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetDelegationFee(ctx, walletId)
	return err
}

// PostAccountKey converts echo context to params.
func (w *ServerInterfaceWrapper) PostAccountKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "index" -------------
	var index string

	err = runtime.BindStyledParameter("simple", false, "index", ctx.Param("index"), &index)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostAccountKey(ctx, walletId, index)
	return err
}

// GetWalletKey converts echo context to params.
func (w *ServerInterfaceWrapper) GetWalletKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "role" -------------
	var role string

	err = runtime.BindStyledParameter("simple", false, "role", ctx.Param("role"), &role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Path parameter "index" -------------
	var index string

	err = runtime.BindStyledParameter("simple", false, "index", ctx.Param("index"), &index)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetWalletKey(ctx, walletId, role, index)
	return err
}

// GetShelleyWalletMigrationInfo converts echo context to params.
func (w *ServerInterfaceWrapper) GetShelleyWalletMigrationInfo(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetShelleyWalletMigrationInfo(ctx, walletId)
	return err
}

// MigrateShelleyWallet converts echo context to params.
func (w *ServerInterfaceWrapper) MigrateShelleyWallet(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.MigrateShelleyWallet(ctx, walletId)
	return err
}

// PutWalletPassphrase converts echo context to params.
func (w *ServerInterfaceWrapper) PutWalletPassphrase(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PutWalletPassphrase(ctx, walletId)
	return err
}

// PostTransactionFee converts echo context to params.
func (w *ServerInterfaceWrapper) PostTransactionFee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTransactionFee(ctx, walletId)
	return err
}

// SignMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) SignMetadata(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "role" -------------
	var role string

	err = runtime.BindStyledParameter("simple", false, "role", ctx.Param("role"), &role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// ------------- Path parameter "index" -------------
	var index string

	err = runtime.BindStyledParameter("simple", false, "index", ctx.Param("index"), &index)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.SignMetadata(ctx, walletId, role, index)
	return err
}

// GetUTxOsStatistics converts echo context to params.
func (w *ServerInterfaceWrapper) GetUTxOsStatistics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUTxOsStatistics(ctx, walletId)
	return err
}

// ListTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) ListTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTransactionsParams
	// ------------- Optional query parameter "start" -------------

	err = runtime.BindQueryParameter("form", true, false, "start", ctx.QueryParams(), &params.Start)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start: %s", err))
	}

	// ------------- Optional query parameter "end" -------------

	err = runtime.BindQueryParameter("form", true, false, "end", ctx.QueryParams(), &params.End)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end: %s", err))
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", ctx.QueryParams(), &params.Order)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order: %s", err))
	}

	// ------------- Optional query parameter "minWithdrawal" -------------

	err = runtime.BindQueryParameter("form", true, false, "minWithdrawal", ctx.QueryParams(), &params.MinWithdrawal)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter minWithdrawal: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTransactions(ctx, walletId, params)
	return err
}

// PostTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) PostTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostTransaction(ctx, walletId)
	return err
}

// DeleteTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", ctx.Param("transactionId"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTransaction(ctx, walletId, transactionId)
	return err
}

// GetTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "walletId" -------------
	var walletId string

	err = runtime.BindStyledParameter("simple", false, "walletId", ctx.Param("walletId"), &walletId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter walletId: %s", err))
	}

	// ------------- Path parameter "transactionId" -------------
	var transactionId string

	err = runtime.BindStyledParameter("simple", false, "transactionId", ctx.Param("transactionId"), &transactionId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetTransaction(ctx, walletId, transactionId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/addresses", wrapper.PostAnyAddress)
	router.GET(baseURL+"/addresses/:addressId", wrapper.InspectAddress)
	router.GET(baseURL+"/byron-wallets", wrapper.ListByronWallets)
	router.POST(baseURL+"/byron-wallets", wrapper.PostByronWallet)
	router.DELETE(baseURL+"/byron-wallets/:walletId", wrapper.DeleteByronWallet)
	router.GET(baseURL+"/byron-wallets/:walletId", wrapper.GetByronWallet)
	router.PUT(baseURL+"/byron-wallets/:walletId", wrapper.PutByronWallet)
	router.GET(baseURL+"/byron-wallets/:walletId/addresses", wrapper.ListByronAddresses)
	router.POST(baseURL+"/byron-wallets/:walletId/addresses", wrapper.CreateAddress)
	router.PUT(baseURL+"/byron-wallets/:walletId/addresses", wrapper.ImportAddresses)
	router.PUT(baseURL+"/byron-wallets/:walletId/addresses/:addressId", wrapper.ImportAddress)
	router.GET(baseURL+"/byron-wallets/:walletId/assets", wrapper.ListByronAssets)
	router.GET(baseURL+"/byron-wallets/:walletId/assets/:policyId", wrapper.GetByronAssetDefault)
	router.GET(baseURL+"/byron-wallets/:walletId/assets/:policyId/:assetName", wrapper.GetByronAsset)
	router.POST(baseURL+"/byron-wallets/:walletId/coin-selections/random", wrapper.ByronSelectCoins)
	router.GET(baseURL+"/byron-wallets/:walletId/migrations", wrapper.GetByronWalletMigrationInfo)
	router.POST(baseURL+"/byron-wallets/:walletId/migrations", wrapper.MigrateByronWallet)
	router.PUT(baseURL+"/byron-wallets/:walletId/passphrase", wrapper.PutByronWalletPassphrase)
	router.POST(baseURL+"/byron-wallets/:walletId/payment-fees", wrapper.PostByronTransactionFee)
	router.GET(baseURL+"/byron-wallets/:walletId/statistics/utxos", wrapper.GetByronUTxOsStatistics)
	router.GET(baseURL+"/byron-wallets/:walletId/transactions", wrapper.ListByronTransactions)
	router.POST(baseURL+"/byron-wallets/:walletId/transactions", wrapper.PostByronTransaction)
	router.DELETE(baseURL+"/byron-wallets/:walletId/transactions/:transactionId", wrapper.DeleteByronTransaction)
	router.GET(baseURL+"/byron-wallets/:walletId/transactions/:transactionId", wrapper.GetByronTransaction)
	router.GET(baseURL+"/network/clock", wrapper.GetNetworkClock)
	router.GET(baseURL+"/network/information", wrapper.GetNetworkInformation)
	router.GET(baseURL+"/network/parameters", wrapper.GetNetworkParameters)
	router.POST(baseURL+"/proxy/transactions", wrapper.PostExternalTransaction)
	router.GET(baseURL+"/settings", wrapper.GetSettings)
	router.PUT(baseURL+"/settings", wrapper.PutSettings)
	router.POST(baseURL+"/shared-wallets", wrapper.PostSharedWallet)
	router.DELETE(baseURL+"/shared-wallets/:walletId", wrapper.DeleteSharedWallet)
	router.GET(baseURL+"/shared-wallets/:walletId", wrapper.GetSharedWallet)
	router.PATCH(baseURL+"/shared-wallets/:walletId/delegation-script-template", wrapper.PatchSharedWalletInDelegation)
	router.PATCH(baseURL+"/shared-wallets/:walletId/payment-script-template", wrapper.PatchSharedWalletInPayment)
	router.GET(baseURL+"/smash/health", wrapper.GetCurrentSmashHealth)
	router.GET(baseURL+"/stake-pools", wrapper.ListStakePools)
	router.DELETE(baseURL+"/stake-pools/*/wallets/:walletId", wrapper.QuitStakePool)
	router.GET(baseURL+"/stake-pools/maintenance-actions", wrapper.GetMaintenanceActions)
	router.POST(baseURL+"/stake-pools/maintenance-actions", wrapper.PostMaintenanceAction)
	router.PUT(baseURL+"/stake-pools/:stakePoolId/wallets/:walletId", wrapper.JoinStakePool)
	router.GET(baseURL+"/wallets", wrapper.ListWallets)
	router.POST(baseURL+"/wallets", wrapper.PostWallet)
	router.DELETE(baseURL+"/wallets/:walletId", wrapper.DeleteWallet)
	router.GET(baseURL+"/wallets/:walletId", wrapper.GetWallet)
	router.PUT(baseURL+"/wallets/:walletId", wrapper.PutWallet)
	router.GET(baseURL+"/wallets/:walletId/addresses", wrapper.ListAddresses)
	router.GET(baseURL+"/wallets/:walletId/assets", wrapper.ListAssets)
	router.GET(baseURL+"/wallets/:walletId/assets/:policyId", wrapper.GetAssetDefault)
	router.GET(baseURL+"/wallets/:walletId/assets/:policyId/:assetName", wrapper.GetAsset)
	router.POST(baseURL+"/wallets/:walletId/coin-selections/random", wrapper.SelectCoins)
	router.GET(baseURL+"/wallets/:walletId/delegation-fees", wrapper.GetDelegationFee)
	router.POST(baseURL+"/wallets/:walletId/keys/:index", wrapper.PostAccountKey)
	router.GET(baseURL+"/wallets/:walletId/keys/:role/:index", wrapper.GetWalletKey)
	router.GET(baseURL+"/wallets/:walletId/migrations", wrapper.GetShelleyWalletMigrationInfo)
	router.POST(baseURL+"/wallets/:walletId/migrations", wrapper.MigrateShelleyWallet)
	router.PUT(baseURL+"/wallets/:walletId/passphrase", wrapper.PutWalletPassphrase)
	router.POST(baseURL+"/wallets/:walletId/payment-fees", wrapper.PostTransactionFee)
	router.POST(baseURL+"/wallets/:walletId/signatures/:role/:index", wrapper.SignMetadata)
	router.GET(baseURL+"/wallets/:walletId/statistics/utxos", wrapper.GetUTxOsStatistics)
	router.GET(baseURL+"/wallets/:walletId/transactions", wrapper.ListTransactions)
	router.POST(baseURL+"/wallets/:walletId/transactions", wrapper.PostTransaction)
	router.DELETE(baseURL+"/wallets/:walletId/transactions/:transactionId", wrapper.DeleteTransaction)
	router.GET(baseURL+"/wallets/:walletId/transactions/:transactionId", wrapper.GetTransaction)
}
